/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view.user;

import com.sun.jdi.connect.spi.Connection;
import dto.Connect;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class frmTimeSheetUser extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmTimeSheet
     */
    private int empId;

    // Constructor nhận empId
    public frmTimeSheetUser(int empId) {
        this.empId = empId;  // Lưu empId
        initComponents();
        
        //lay ten 
        try {
            Connect cn = new Connect();
            String query = "SELECT name FROM employees WHERE empId = " + empId;

            try (ResultSet resultSet = cn.selectQuery(query, new Object[0])) {
                if (resultSet.next()) {
                    String empName = resultSet.getString("name");
                    txtEmp.setText(empName);  // Hiển thị tên nhân viên trong txtEmp
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Lỗi khi lấy tên nhân viên: " + e.getMessage());
                e.printStackTrace();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi kết nối cơ sở dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }

        getTimeSheet();  // Gọi hàm lấy bảng thời gian
    }

    public frmTimeSheetUser() {
        initComponents();
        getTimeSheet();
    }

    public void getTimeSheet() {
        try {
            Connect cn = new Connect();
            DefaultTableModel dt = (DefaultTableModel) tbTime.getModel();
            dt.setRowCount(0); // Làm sạch bảng trước khi thêm dữ liệu mới

            // Câu lệnh truy vấn để lấy dữ liệu từ bảng timesheet cho empId hiện tại
            String query = "SELECT ts.tsId, e.name AS empName, ts.inTime, ts.outTime, ts.workDate "
                    + "FROM timesheet ts "
                    + "JOIN employees e ON ts.empId = e.empId "
                    + "WHERE ts.empId = " + this.empId;

            try (ResultSet resultSet = cn.selectQuery(query, new Object[0])) {
                while (resultSet.next()) {
                    Vector v = new Vector();
                    v.add(resultSet.getInt("tsId"));
                    v.add(resultSet.getString("empName"));
                    v.add(resultSet.getString("inTime"));
                    v.add(resultSet.getString("outTime"));
                    v.add(resultSet.getString("workDate"));
                    dt.addRow(v);  // Thêm Vector vào bảng
                }
                System.out.println("Lấy dữ liệu thành công từ timesheet");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Lỗi khi lấy dữ liệu: " + e.getMessage());
                System.out.println(e);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi kết nối cơ sở dữ liệu: " + e.getMessage());
            System.out.println(e);
        }
    }

    public void clearText() {
        txtId.setText("");
        txtEmp.setText("");
        txtIn.setText("");
        txtOut.setText("");
        txtWord.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbTime = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtEmp = new javax.swing.JTextField();
        txtIn = new javax.swing.JTextField();
        txtOut = new javax.swing.JTextField();
        txtWord = new javax.swing.JTextField();
        btTimeSheet = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        tbTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Time Sheet ID", "Employees", "In Date", "Out Date", "Word Date"
            }
        ));
        jScrollPane1.setViewportView(tbTime);

        jPanel1.setAutoscrolls(true);

        jLabel1.setText("Time Sheet ID:");

        jLabel2.setText("In Date:");

        jLabel3.setText("Out Date:");

        jLabel4.setText("Word Date:");

        jLabel5.setText("Employees");

        txtId.setEnabled(false);

        txtEmp.setEnabled(false);

        btTimeSheet.setText("TimeSheet");
        btTimeSheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTimeSheetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIn)
                            .addComponent(txtOut))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(txtWord))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(22, 22, 22)
                            .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btTimeSheet))
                .addGap(149, 149, 149))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWord, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOut, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btTimeSheet, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        txtId.getAccessibleContext().setAccessibleName("");
        txtEmp.getAccessibleContext().setAccessibleName("");
        txtIn.getAccessibleContext().setAccessibleName("");
        txtOut.getAccessibleContext().setAccessibleName("");
        txtWord.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btTimeSheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTimeSheetActionPerformed
        try {
            // Lấy giờ hiện tại
            java.time.LocalTime now = java.time.LocalTime.now();  // Chỉ lấy giờ hiện tại
            java.time.format.DateTimeFormatter formatterTime = java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss");
            String formattedTime = now.format(formatterTime);  // Lấy giờ hiện tại dạng HH:mm:ss

            // Lấy ngày hiện tại
            String currentDate = java.time.LocalDate.now().toString();
            txtWord.setText(currentDate);

            // Lấy empId từ đối tượng frmTimeSheetUser
            String empId = Integer.toString(this.empId);

            // Kiểm tra các trường nhập liệu
            if (empId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không được để trống!");
                return;
            }

            // Kết nối cơ sở dữ liệu
            Connect cn = new Connect();

            // Kiểm tra xem đã có bản ghi timesheet cho nhân viên này trong ngày hiện tại chưa
            String checkQuery = "SELECT tsId, inTime, outTime, workDate FROM timesheet WHERE empId = ? AND workDate = ?";
            Object[] checkParams = {empId, currentDate};

            try (ResultSet rs = cn.selectQuery(checkQuery, checkParams)) {
                if (rs.next()) {
                    // Đã tồn tại bản ghi timesheet trong ngày
                    int tsId = rs.getInt("tsId");
                    String inTime = rs.getString("inTime");
                    String outTime = rs.getString("outTime");
                    String workDate = rs.getString("workDate");

                    // Kiểm tra số lần chấm công
                    if (inTime != null && !inTime.isEmpty() && outTime != null && !outTime.isEmpty()) {
                        // Cả inTime và outTime đều đã được ghi
                        JOptionPane.showMessageDialog(this, "Bạn đã chấm công đủ 2 lần trong ngày hôm nay!");
                        return;
                    }

                    if (inTime == null || inTime.isEmpty()) {
                        // Lưu thời gian vào (inTime) nếu chưa có
                        String updateQuery = "UPDATE timesheet SET inTime = ?, workDate = ? WHERE tsId = ?";
                        Object[] updateParams = {formattedTime, currentDate, tsId};
                        int result = cn.executeUpdateQuery(updateQuery, updateParams);

                        if (result > 0) {
                            JOptionPane.showMessageDialog(this, "Đã lưu thời gian vào (inTime)!");
                            txtIn.setText(formattedTime); // Hiển thị thời gian vào
                        } else {
                            JOptionPane.showMessageDialog(this, "Lỗi khi lưu thời gian vào (inTime)!");
                        }
                    } else if (outTime == null || outTime.isEmpty()) {
                        // Lưu thời gian ra (outTime) nếu đã có thời gian vào
                        String updateQuery = "UPDATE timesheet SET outTime = ?, workDate = ? WHERE tsId = ?";
                        Object[] updateParams = {formattedTime, currentDate, tsId};
                        int result = cn.executeUpdateQuery(updateQuery, updateParams);

                        if (result > 0) {
                            JOptionPane.showMessageDialog(this, "Đã lưu thời gian ra (outTime)!");
                            txtOut.setText(formattedTime); // Hiển thị thời gian ra
                        } else {
                            JOptionPane.showMessageDialog(this, "Lỗi khi lưu thời gian ra (outTime)!");
                        }
                    }
                } else {
                    // Không có bản ghi timesheet trong ngày -> Tạo mới
                    String insertQuery = "INSERT INTO timesheet (empId, inTime, outTime, workDate) VALUES (?, ?, ?, ?)";
                    Object[] insertParams = {empId, formattedTime, null, currentDate};
                    int result = cn.executeUpdateQuery(insertQuery, insertParams);

                    if (result > 0) {
                        JOptionPane.showMessageDialog(this, "Đã tạo mới bản ghi chấm công với thời gian vào (inTime)!");
                        txtIn.setText(formattedTime); // Hiển thị thời gian vào
                    } else {
                        JOptionPane.showMessageDialog(this, "Lỗi khi tạo mới bản ghi chấm công!");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
            e.printStackTrace();
        }
        getTimeSheet();
    }//GEN-LAST:event_btTimeSheetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btTimeSheet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbTime;
    private javax.swing.JTextField txtEmp;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIn;
    private javax.swing.JTextField txtOut;
    private javax.swing.JTextField txtWord;
    // End of variables declaration//GEN-END:variables
}
