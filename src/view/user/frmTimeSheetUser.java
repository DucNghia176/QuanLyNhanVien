/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view.user;

import com.sun.jdi.connect.spi.Connection;
import dto.Connect;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class frmTimeSheetUser extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmTimeSheet
     */
    private int empId;

    // Constructor nhận empId
    public frmTimeSheetUser(int empId) {
        this.empId = empId;  // Lưu empId
        initComponents();
        txtEmp.setText(Integer.toString(empId));  // Hiển thị empId trong text field txtEmp
        getTimeSheet();  // Gọi hàm lấy bảng thời gian
    }

    public frmTimeSheetUser() {
        initComponents();
        getTimeSheet();
    }

    public void getTimeSheet() {
        try {
            Connect cn = new Connect();
            DefaultTableModel dt = (DefaultTableModel) tbTime.getModel();
            dt.setRowCount(0); // Làm sạch bảng trước khi thêm dữ liệu mới

            // Câu lệnh truy vấn để lấy dữ liệu từ bảng timesheet cho empId hiện tại
            String query = "SELECT tsId, empId, inTime, outTime, workDate FROM timesheet WHERE empId = " + this.empId;

            try (ResultSet resultSet = cn.selectQuery(query, new Object[0])) {
                while (resultSet.next()) {
                    Vector v = new Vector();
                    v.add(resultSet.getInt("tsId"));
                    v.add(resultSet.getString("empId"));
                    v.add(resultSet.getString("inTime"));
                    v.add(resultSet.getString("outTime"));
                    v.add(resultSet.getString("workDate"));
                    dt.addRow(v);  // Thêm Vector vào bảng
                }
                System.out.println("Lấy dữ liệu thành công từ timesheet");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Lỗi khi lấy dữ liệu: " + e.getMessage());
                System.out.println(e);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi kết nối cơ sở dữ liệu: " + e.getMessage());
            System.out.println(e);
        }
    }

    private void btInActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Lấy thời gian hiện tại
            java.time.LocalDateTime now = java.time.LocalDateTime.now();
            java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedNow = now.format(formatter);

            // Gán giá trị thời gian hiện tại vào txtIn
            txtIn.setText(formattedNow);

            // Lấy empId từ đối tượng frmTimeSheetUser
            String empId = Integer.toString(this.empId);

            // Kiểm tra các trường nhập liệu
            if (empId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không được để trống!");
                return;
            }

            // Chuẩn bị truy vấn và tham số
            String query = "INSERT INTO timesheet (empId, inTime, workDate) VALUES (?, ?, ?)";
            Object[] params = {
                empId, // Mã nhân viên (empId)
                formattedNow, // Thời gian vào (inTime)
                java.time.LocalDate.now().toString() // Ngày làm việc (workDate)
            };

            // Kết nối cơ sở dữ liệu và thực thi truy vấn
            Connect cn = new Connect(); // Đảm bảo class Connect được triển khai để hỗ trợ executeUpdateQuery
            int result = cn.executeUpdateQuery(query, params);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Chấm công thành công!");
                getTimeSheet(); // Gọi hàm load lại dữ liệu bảng nếu cần
            } else {
                JOptionPane.showMessageDialog(this, "Chấm công thất bại!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void clearText() {
        txtId.setText("");
        txtEmp.setText("");
        txtIn.setText("");
        txtOut.setText("");
        txtWord.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbTime = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtEmp = new javax.swing.JTextField();
        txtIn = new javax.swing.JTextField();
        txtOut = new javax.swing.JTextField();
        txtWord = new javax.swing.JTextField();
        btIn1 = new javax.swing.JButton();
        btOut = new javax.swing.JButton();

        tbTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Time Sheet ID", "Employees", "In Date", "Out Date", "Word Date"
            }
        ));
        jScrollPane1.setViewportView(tbTime);

        jPanel1.setAutoscrolls(true);

        jLabel1.setText("Time Sheet ID:");

        jLabel2.setText("In Date:");

        jLabel3.setText("Out Date:");

        jLabel4.setText("Word Date:");

        jLabel5.setText("Employees");

        btIn1.setText("jButton1");
        btIn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIn1ActionPerformed(evt);
            }
        });

        btOut.setText("jButton1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIn)
                            .addComponent(txtOut))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btIn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtWord))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(22, 22, 22)
                                .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(149, 149, 149))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btOut)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(txtIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btIn1))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btOut))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btIn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIn1ActionPerformed
        // TODO add your handling code here:
        try {
            // Lấy thời gian hiện tại
            java.time.LocalDateTime now = java.time.LocalDateTime.now();
            java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedNow = now.format(formatter);

            // Gán giá trị thời gian hiện tại vào txtIn
            txtIn.setText(formattedNow);

            // Lấy empId từ đối tượng frmTimeSheetUser
            String empId = Integer.toString(this.empId);

            // Kiểm tra các trường nhập liệu
            if (empId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không được để trống!");
                return;
            }

            // Chuẩn bị truy vấn và tham số
            String query = "INSERT INTO timesheet (empId, inTime, workDate) VALUES (?, ?, ?)";
            Object[] params = {
                empId, // Mã nhân viên (empId)
                formattedNow, // Thời gian vào (inTime)
                java.time.LocalDate.now().toString() // Ngày làm việc (workDate)
            };

            // Kết nối cơ sở dữ liệu và thực thi truy vấn
            Connect cn = new Connect(); // Đảm bảo class Connect được triển khai để hỗ trợ executeUpdateQuery
            int result = cn.executeUpdateQuery(query, params);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Chấm công thành công!");
                getTimeSheet(); // Gọi hàm load lại dữ liệu bảng nếu cần
            } else {
                JOptionPane.showMessageDialog(this, "Chấm công thất bại!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btIn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btIn1;
    private javax.swing.JButton btOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbTime;
    private javax.swing.JTextField txtEmp;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIn;
    private javax.swing.JTextField txtOut;
    private javax.swing.JTextField txtWord;
    // End of variables declaration//GEN-END:variables
}
